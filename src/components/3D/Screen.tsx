/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader, GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    Object_7: THREE.Mesh
    Object_8: THREE.Mesh
    Object_9: THREE.Mesh
    Object_5: THREE.Mesh
  }
  materials: {
    Frame: THREE.MeshStandardMaterial
    Power: THREE.MeshStandardMaterial
    Screen: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Action_Frame_3' | 'FrameAction_Frame_3'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useLoader<GLTFResult>(GLTFLoader, '/models/screen.gltf')

  console.log('materials', materials);
  const actions = useRef<GLTFActions>()
  const [mixer] = useState(() => new THREE.AnimationMixer(null as any))
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      Action_Frame_3: mixer.clipAction(animations[0], group.current),
      FrameAction_Frame_3: mixer.clipAction(animations[1], group.current),
    }

    actions.current.Action_Frame_3.play();

    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <group rotation={[-Math.PI / 2, 0, 0]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <group position={[0, 0.06, -0.13]}>
              <mesh material={materials.Frame} geometry={nodes.Object_7.geometry} />
              <mesh material={materials.Power} geometry={nodes.Object_8.geometry} position={[0, 0, 0]} />
              <mesh material={materials.Screen} geometry={nodes.Object_9.geometry} />
            </group>
            <mesh material={materials.Frame} geometry={nodes.Object_5.geometry} />
          </group>
        </group>
      </group>
    </group>
  )
}
