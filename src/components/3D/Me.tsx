/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useEffect, useState } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader, GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { getMouseDegrees } from '../../utils/mouseUtils';
import usePrevious from '../hooks/usePrevious';

type Props = {
  isCursorOnLink: boolean;
  mousePosition: { x: number, y: number };
};

type GLTFResult = GLTF & {
  nodes: {
    ['Arm_-_Left']: THREE.SkinnedMesh,
    Arm_Right: THREE.SkinnedMesh,
    Body: THREE.SkinnedMesh,
    Head: THREE.SkinnedMesh,
    ['Left_-_Right']: THREE.SkinnedMesh,
    ['Leg_-_Left']: THREE.SkinnedMesh,
    Bone: THREE.Bone,
    Bone003: THREE.Bone,
    Bone005: THREE.Bone,
  },
  materials: {
    Material: THREE.MeshStandardMaterial,
  },
}

export default function Model(props: JSX.IntrinsicElements['group'] & Props) {
  const { isCursorOnLink } = props;
  const prevIsCursorOnLink = usePrevious(isCursorOnLink);
  const group = useRef<THREE.Group>();
  const mainBoneRef = useRef<THREE.Mesh>();
  const { nodes, materials, animations } = useLoader<GLTFResult>(GLTFLoader, '/models/me/Me.gltf');
  const actions = useRef<any>();
  const [mixer] = useState(() => new THREE.AnimationMixer());

  const headDefaultRotation = useRef<THREE.Euler>();
  const hipsDefaultRotation = useRef<THREE.Euler>();

  // Get degrees based on mouse position on screen
  let degrees = getMouseDegrees(props.mousePosition.x, props.mousePosition.y, 40);

  useEffect(() => {
    actions.current = {
      excited: mixer.clipAction(animations[0], group.current),
      idle: mixer.clipAction(animations[1], group.current),
    };

    actions.current.idle.play();

    return () => animations.forEach(clip => mixer.uncacheClip(clip));
  }, []);

  useEffect(() => {
    const hipsBone = mainBoneRef.current;
    const headBone = mainBoneRef.current.children[0].children[0];

    hipsDefaultRotation.current = hipsBone.rotation.clone();
    headDefaultRotation.current = headBone.rotation.clone();
  }, []);

  useEffect(() => {
    if (isCursorOnLink && !prevIsCursorOnLink) {
      actions.current.excited.play();
      actions.current.idle.stop();

    }
    else if (!isCursorOnLink && prevIsCursorOnLink) {
      actions.current.idle.play();
      actions.current.excited.stop();
    }
  });
  
  useFrame((state, delta) => {
    mixer.update(delta);

    if (!mainBoneRef.current) return;

    const headBone = mainBoneRef.current.children[0].children[0];
    const hipsBone = mainBoneRef.current;

    const rotationFactor = 0.5;

    const currentYDeg = THREE.MathUtils.radToDeg(headDefaultRotation.current.y);
    const currentXDeg = THREE.MathUtils.radToDeg(headDefaultRotation.current.x);

    const currentHipsYDeg = THREE.MathUtils.radToDeg(hipsDefaultRotation.current.y);
    const currentHipsXDeg = THREE.MathUtils.radToDeg(hipsDefaultRotation.current.x);

    headBone.rotation.y = THREE.Math.degToRad(currentYDeg + (degrees.x * 0.1));
    headBone.rotation.x = THREE.Math.degToRad(currentXDeg + (degrees.y * rotationFactor));

    hipsBone.rotation.y = THREE.Math.degToRad(currentHipsXDeg + (degrees.x * rotationFactor));
    hipsBone.rotation.x = THREE.Math.degToRad(currentHipsYDeg + (degrees.y * rotationFactor));
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, 1.63, 0]} scale={[1.6, 1.6, 1.6]}>
        <primitive ref={mainBoneRef} object={nodes.Bone} />
        <primitive object={nodes.Bone003} />
        <primitive object={nodes.Bone005} />
        <skinnedMesh
          material={materials.Material}
          geometry={nodes['Arm_-_Left'].geometry}
          skeleton={nodes['Arm_-_Left'].skeleton}
        />
        <skinnedMesh
          material={materials.Material}
          geometry={nodes.Arm_Right.geometry}
          skeleton={nodes.Arm_Right.skeleton}
        />
        <skinnedMesh material={materials.Material} geometry={nodes.Body.geometry} skeleton={nodes.Body.skeleton} />
        <skinnedMesh material={materials.Material} geometry={nodes.Head.geometry} skeleton={nodes.Head.skeleton} />
        <skinnedMesh
          material={materials.Material}
          geometry={nodes['Left_-_Right'].geometry}
          skeleton={nodes['Left_-_Right'].skeleton}
        />
        <skinnedMesh
          material={materials.Material}
          geometry={nodes['Leg_-_Left'].geometry}
          skeleton={nodes['Leg_-_Left'].skeleton}
        />
      </group>
    </group>
  )
}
